using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace CSToCustomType
{
    internal class CustomTypeGenerator
    {
        public CustomTypeGenerator(ParsedType parsedType, string outputPath)
        {
            Console.WriteLine($"Generating C++ files for type {parsedType.Name} to {outputPath}...");
            GenerateHeaderFile(parsedType, outputPath);
            GenerateSourceFile(parsedType, outputPath);
        }

        private void GenerateHeaderFile(ParsedType parsedType, string outputPath)
        {
            var filePath = Path.Combine(outputPath, $"{parsedType.Name}.hpp");

            var publicFields = parsedType.Fields.Where(f => f.Visibility == "Public" || f.Visibility == "Internal").ToList();
            var publicMethods = parsedType.Methods.Where(m => m.Visibility == "Public" || m.Visibility == "Internal").ToList();

            var header = new StringBuilder();
            header.AppendLine("#pragma once");
            header.AppendLine($"// Generated by CSToCustomType");
            header.AppendLine($"// Type: {parsedType.Name}");
            header.AppendLine();
            header.AppendLine($"#include \"lapiz/shared/macros.hpp\"");
            header.AppendLine($"#include \"custom-types/shared/macros.hpp\"");
            header.AppendLine();
            //string interfaces = "";
            //foreach (var @interface in parsedType.Interfaces)
            //{
            //    interfaces += $"classof(::{@interface}*), ";
            //}
            //interfaces = interfaces.TrimEnd(' ', ',');

            header.AppendLine($"DECLARE_CLASS_CODEGEN({parsedType.Name}, {parsedType.Name}, {parsedType.BaseClass},");

            // end of custom type macro
            header.AppendLine(");");
            File.WriteAllText(filePath, header.ToString());
        }

        private void GenerateSourceFile(ParsedType parsedType, string outputPath)
        {
            var filePath = Path.Combine(outputPath, $"{parsedType.Name}.cpp");

            var source = new StringBuilder();
            source.AppendLine($"// Generated by CSToCustomType");
            source.AppendLine($"// Type: {parsedType.Name}");
            source.AppendLine();
            source.AppendLine($"#include \"{parsedType.Name}.hpp\"");
            source.AppendLine();
            //source.AppendLine($"DEFINE_TYPE({parsedType.Namespace}, {parsedType.Name});");

            File.WriteAllText(filePath, source.ToString());
        }

        private string GetQuestTypeVersion(string type)
        {
            switch (type)
            {
                case "System.Boolean":
                    return "bool";
                case "System.Byte":
                    return "uint8_t";
                case "System.SByte":
                    return "int8_t";
                case "System.Int16":
                    return "int16_t";
                case "System.UInt16":
                    return "uint16_t";
                case "System.Int32":
                    return "int";
                case "System.UInt32":
                    return "uint";
                case "System.Int64":
                    return "int64_t";
                case "System.UInt64":
                    return "uint64_t";
                case "System.Single":
                    return "float";
                case "System.Double":
                    return "double";
                case "System.String":
                    return "StringW";
                case "System.Void":
                    return "void";
                case "System.Object":
                    return "Il2CppObject";
                default:
                    return type;
            }
        }

        private string SanitiseHeaderForIL2CPP(string monoName)
        {
            var replaced = monoName.Replace("`", "_").Replace(".", "/");
            return $"#include \"{replaced}.hpp\"";
        }
    }
}
